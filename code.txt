  uint8_t card1[] =  { 0x4, 0x36, 0x38, 0xB2, 0x21, 0x25, 0x80 };  //card 1 Ikhsan
  uint8_t card2[] =  { 0x5, 0x8A, 0x99, 0x1E, 0x59, 0x31, 0x0 };  //card 2 Maul
  uint8_t card3[] =  { 0xF9, 0x11, 0xA1, 0x98, 0, 0, 0 }; //card jenius ikhsan
  uint8_t card4[] =  { 0x6F, 0x58, 0x90, 0x2C, 0, 0, 0 }; // emoney	

void loop() {
  // put your main code here, to run repeatedly:
  boolean success;
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID

  uint8_t uidLength;        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
  unsigned long readID =0;

  // Wait for an ISO14443A type cards (Mifare, etc.).  When one is found
  // 'uid' will be populated with the UID, and uidLength will indicate
  // if the uid is 4 bytes (Mifare Classic) or 7 bytes (Mifare Ultralight)
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);

  if (success) {
    Serial.println("Found a card!");
    Serial.print("UID Value: ");
      for (uint8_t i=0; i < uidLength; i++) 
      {
        Serial.print(" 0x");Serial.print(uid[i], HEX); 
        readID += uid[i];
        if(i < (uidLength -1)){
          readID = readID << 8;
        }
      }

    int i=0;
    int card1matches=0;
    int card2matches=0;
    int card3matches=0;

    for(i=0;i<7;i++)
    {
      if(uid[i] == card1[i])
      {
        card1matches++;      
      }
      if(uid[i] == card2[i])
      {
        card2matches++;      
      }
      if(uid[i] == card3[i])
      {
        card3matches++;      
      }
    }

    if(card1matches == 7)
    {
      Unlock();
    }
    if(card2matches == 7)
    {
      Unlock();
    }
    if(card3matches == 7)
    {
      Unlock();
    }

      delay(1000);
  }
  else
  {
    // PN532 probably timed out waiting for a card
    Serial.println("Timed out waiting for a card");
  }
}

void Unlock()
  {
        Serial.println("");
        Serial.println("Unlocking!!");
        digitalWrite(strikePlate, HIGH);
        digitalWrite(ledPin, HIGH);
        delay(2000);
        digitalWrite(strikePlate, LOW);
        digitalWrite(ledPin, LOW);

    }

%no uid
#include <Adafruit_PN532.h>
#include <SPI.h>
#include <Wire.h>

#define RELAY_ON (4)
#define IRQ   (2)
#define RESET (3)  
#define ACCESS_DELAY 1000
#define DENIED_DELAY 1000

Adafruit_PN532 nfc(IRQ, RESET);

void setup(void) {
  Serial.begin(115200);
  Serial.println(">http://www.github.com/awangga/NFCReader");
  pinMode(RELAY_ON, OUTPUT);
  //digitalWrite(RELAY, HIGH);
  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
    Serial.print(">Didn't find PN53x board, please close and open serial monitor. If problem still exist please check your wiring");
    while (1); // halt
  }
  
  // Got ok data, print it out!
  Serial.print(">Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX); 
  Serial.print(">Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC); 
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
  
  // Set the max number of retry attempts to read from a card
  // This prevents us from waiting forever for a card, which is
  // the default behaviour of the PN532.
  nfc.setPassiveActivationRetries(0xFF);
  
  // configure board to read RFID tags
  nfc.SAMConfig();
    
  Serial.println("Waiting for an ISO14443A card");
}

void loop() {
  // put your main code here, to run repeatedly:
  boolean success;
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID

  uint8_t uidLength;        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
  unsigned long readID =0;

  // Wait for an ISO14443A type cards (Mifare, etc.).  When one is found
  // 'uid' will be populated with the UID, and uidLength will indicate
  // if the uid is 4 bytes (Mifare Classic) or 7 bytes (Mifare Ultralight)
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);

  if (success) {
    Serial.println("Found a card!");
    Serial.print("UID Value: ");
      for (uint8_t i=0; i < uidLength; i++) 
      {
        Serial.print(" 0x");Serial.print(uid[i], HEX); 
        readID += uid[i];
        if(i < (uidLength -1)){
          readID = readID << 8;
        }

        unlock();
      }

    Serial.println("");
  // Wait 1 second before continuing
  delay(1000);
  }
  else
  {
    // PN532 probably timed out waiting for a card
    Serial.println("Timed out waiting for a card");
  }  
}

void unlock()
  {
        Serial.println("");
        Serial.println("Unlocking!!");
        digitalWrite(RELAY_ON, LOW);
        delay(1000);
        digitalWrite(RELAY_ON, HIGH);
        
    }



void setup() 
{
  Serial.begin(9600);   // Initiate a serial communication
  SPI.begin();          // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  pinMode(LED_G, OUTPUT);
  pinMode(LED_R, OUTPUT);
  pinMode(RELAY, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  noTone(BUZZER);
  digitalWrite(RELAY, HIGH);
  Serial.println("Put your card to the reader...");
  Serial.println();

}
void loop() 
{
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  if (content.substring(1) == "F9 02 BD 55" || content.substring(1) == "10 A9 01 74" || content.substring(1) == "04 78 78 8A DC 2F 80" || content.substring(1) == "04 25 15 D2 4B 57 80") //change here the UID of the card/cards that you want to give access
  {
    Serial.println("Authorized access");
    Serial.println();
    delay(500);
    digitalWrite(RELAY, LOW);
    digitalWrite(LED_G, HIGH);
    delay(ACCESS_DELAY);
    digitalWrite(RELAY, HIGH);
    digitalWrite(LED_G, LOW);
  }

 else   {
    Serial.println(" Access denied");
    digitalWrite(LED_R, HIGH);
    tone(BUZZER, 600);
    delay(DENIED_DELAY);
    digitalWrite(LED_R, LOW);
    noTone(BUZZER);
  }
}


Raziq  0x4, 0x23, 0x24, 0xFA, 0x80, 0x5B, 0x80
Adit 0x4, 0x60, 0x59, 0xCA, 0x5B, 0x2A, 0x80
Rifa 0x4, 0x84, 0x7A, 0x5A, 0x81, 0x2A, 0x80
Faisal 0x4, 0x8A, 0x61, 0xBA, 0x41, 0x2A, 0x80